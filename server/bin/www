#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log(
    "\x1b[34m%s\x1b[1m",
    `Server listening @ http://localhost:${process.env.PORT}`
  );
}

const io = require('socket.io')(server)

io.on('connection', (socket) => {

   console.log(`Connected: ${socket.id}`)
   
   socket.on('disconnect', () =>
      console.log(`Disconnected: ${socket.id}`))
   
   socket.on('join', (room, socketId) => {
      console.log(`socket : ${socket.id}, peer : ${socketId}, joining room : ${room}`)
      socket.join(room)
      socket.to(room).broadcast.emit('classmate joined', socketId)
   })
   
   // socket.on('coding', (data) => {
   //    const { code, room, socketId } = data
   //    console.log(`code: ${code.html}, room: ${room}, id : ${socket.id}, peerId : ${socketId}`)
   //    socket.to(room).broadcast.emit('coding', code, socketId)
   // })

   socket.on('coding', (code, room, socketId) => {
      console.log(`code: ${code.html}, room: ${room}, id : ${socket.id}, peerId : ${socketId}`)
      socket.to(room).broadcast.emit('coding', code, socketId)
   })

   socket.on('change tab', (room, html, css, js) => {
      console.log(html, css, js)
      socket.to(room).broadcast.emit('change tab', html, css, js)
   })
})
